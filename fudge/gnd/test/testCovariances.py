#!/usr/bin/env python
# encoding: utf-8

# <<BEGIN-copyright>>
# Copyright (c) 2016, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
# Written by the LLNL Nuclear Data and Theory group
#         (email: mattoon1@llnl.gov)
# LLNL-CODE-683960.
# All rights reserved.
# 
# This file is part of the FUDGE package (For Updating Data and 
#         Generating Evaluations)
# 
# When citing FUDGE, please use the following reference:
#   C.M. Mattoon, B.R. Beck, N.R. Patel, N.C. Summers, G.W. Hedstrom, D.A. Brown, "Generalized Nuclear Data: A New Structure (with Supporting Infrastructure) for Handling Nuclear Data", Nuclear Data Sheets, Volume 113, Issue 12, December 2012, Pages 3145-3171, ISSN 0090-3752, http://dx.doi.org/10. 1016/j.nds.2012.11.008
# 
# 
#     Please also read this link - Our Notice and Modified BSD License
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the disclaimer below.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the disclaimer (as noted below) in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of LLNS/LLNL nor the names of its contributors may be used
#       to endorse or promote products derived from this software without specific
#       prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY, LLC,
# THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# 
# Additional BSD Notice
# 
# 1. This notice is required to be provided under our contract with the U.S.
# Department of Energy (DOE). This work was produced at Lawrence Livermore
# National Laboratory under Contract No. DE-AC52-07NA27344 with the DOE.
# 
# 2. Neither the United States Government nor Lawrence Livermore National Security,
# LLC nor any of their employees, makes any warranty, express or implied, or assumes
# any liability or responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that its use
# would not infringe privately-owned rights.
# 
# 3. Also, reference herein to any specific commercial products, process, or services
# by trade name, trademark, manufacturer or otherwise does not necessarily constitute
# or imply its endorsement, recommendation, or favoring by the United States Government
# or Lawrence Livermore National Security, LLC. The views and opinions of authors expressed
# herein do not necessarily state or reflect those of the United States Government or
# Lawrence Livermore National Security, LLC, and shall not be used for advertising or
# product endorsement purposes.
# 
# <<END-copyright>>

"""
test fudge/gnd/covariances
dbrown, 8/22/2012
"""

import unittest
from fudge.gnd import covariances
from fudge.core.math import matrix

class grouping_test(unittest.TestCase):
    def setUp(self):
        # The COMMARA-2.0 33 group structure
        self.__groupBoundaries = [
            1.9640E+07, 1.0000E+07, 6.0653E+06, 3.6788E+06, 2.2313E+06, 1.3534E+06,
            8.2085E+05, 4.9787E+05, 3.0197E+05, 1.8316E+05, 1.1109E+05, 6.7380E+04,
            4.0868E+04, 2.4788E+04, 1.5034E+04, 9.1188E+03, 5.5308E+03, 3.3546E+03,
            2.0347E+03, 1.2341E+03, 7.4852E+02, 4.5400E+02, 3.0433E+02, 1.4863E+02,
            9.1661E+01, 6.7904E+01, 4.0169E+01, 2.2603E+01, 1.3710E+01, 8.3153E+00,
            4.0000E+00, 5.4000E-01, 1.0000E-01, 1e-5 ]
        self.__groupBoundaries.reverse()
        self.__groupUnit = 'eV'
    
    def test1(self):
        '''a covariance on a a coarse group whose group boundaries align with the COMMARA-2.0 group boundaries'''
        a = covariances.covarianceMatrix( 
            axes = [ 
                covariances.covarianceAxis( index=0, label="row_energy_bounds", interpolation="lin,flat", unit='MeV', 
                    data=[ 1.0000E-07, 1.1109E-01, 1.3534E+00, 1.9640E+01 ] ),
                covariances.covarianceAxis( index=1, label="column_energy_bounds", mirrorOtherAxis=True ),
                covariances.covarianceAxis( index=2, label="matrix_elements", unit="b**2" ) ],
            matrix = matrix.matrix( [ [ 4.0, 1.0, 0.0 ], [ 1.0, 9.0, 0.0 ], [ 0.0, 0.0, 25.0 ] ], form=matrix.symmetricFormToken ),type='relative' )
    
        self.assertEqual( map( str, a.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), [] )
        self.assertEqual( '\n'.join( a.toXMLList() ), '''<covarianceMatrix type="relative">
  <axes>
    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-7 0.11109 1.3534 19.64</axis>
    <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>
    <axis index="2" label="matrix_elements" unit="b**2"/></axes>
  <matrix rows="3" columns="3" form="symmetric">
    4.0
    1.0 9.0
    0.0 0.0 25.0</matrix></covarianceMatrix>''')

        from fudge.core.math._xData import axes, XYs
        testXYsAxes = axes.axes( )
        testXYsAxes[0] = axes.axis( 'energy_in', 0, 'MeV', interpolation = axes.interpolationXY( axes.linearToken, axes.linearToken ) )
        testXYsAxes[1] = axes.axis( 'crossSection', 1, 'b' )
        testXYs = XYs.XYs( testXYsAxes, [ [ 1.0000E-07, 2.0 ], [ 1.9640E+01, 2.0 ] ], 1e-3, safeDivide = True, biSectionMax = 7 )
        aAbs = a.toAbsolute( rowData=testXYs )
        self.assertEqual( '\n'.join( aAbs.toXMLList() ), '<covarianceMatrix type="absolute">\n  <axes>\n    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-7 0.11109 1.3534 19.64</axis>\n    <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>\n    <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n  <matrix rows="3" columns="3" form="symmetric">\n    16.0\n    4.0 36.0\n    0.0 0.0 100.0</matrix></covarianceMatrix>' )
        aRel = aAbs.toRelative( rowData=testXYs )
        self.assertEqual( '\n'.join( aRel.toXMLList() ), '\n'.join( a.toXMLList() ) )
            
        g = a.group( groupBoundaries = ( self.__groupBoundaries, self.__groupBoundaries ), groupUnit = ( self.__groupUnit, self.__groupUnit ) )
        g.convertAxesToUnits( ( 'MeV', 'MeV', 'b**2' ) )
        self.assertTrue( g.axes[0].unit, 'MeV' )
        self.assertTrue( g.axes[1].unit, 'MeV' )
        self.assertTrue( g.axes[2].unit, 'b**2' )
        self.assertEqual( map(str, g.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), ['17 negative eigenvalues! Worst case = -3.521258e-14', 'Ratio of smallest/largest eigenvalue (2.797040e-48) is too small'] )
        self.assertEqual( '\n'.join( g.toXMLList() ), '''<covarianceMatrix type="relative">
  <axes>
    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="34"> 1e-11 1e-7 5.4e-7 4e-6 8.3153e-6 1.371e-5 2.2603e-5 0.000040169 0.000067904 9.1661e-5 1.4863e-4 3.0433e-4 4.54e-4 0.00074852 1.2341e-3 2.0347e-3 3.3546e-3 5.5308e-3 0.0091188 0.015034 0.024788 0.040868 0.06738 0.11109 0.18316 0.30197 0.49787 0.82085 1.3534 2.2313 3.6788 6.0653 10 19.64</axis>
    <axis index="1" label="column_energy_bounds" unit="eV" mirror_row_energy_bounds="true" length="34"> 1e-5 0.1 0.54 4 8.3153 13.71 22.603 40.169 67.904 91.661 148.63 304.33 454 748.52 1234.1 2034.7 3354.6 5530.8 9118.8 15034 24788 40868 67380 111090 183160 301970 497870 820850 1353400 2231300 3678800 6065300 1e7 1.964e7</axis>
    <axis index="2" label="matrix_elements" unit="b**2"/></axes>
  <matrix rows="33" columns="33" form="symmetric">
    7.70526075265e-32
    5.55167029015e-16 4.0
    5.55167029015e-16 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    5.55167029015e-16 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0
    1.38791757254e-16 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 9.0
    1.38791757254e-16 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 9.0 9.0
    1.38791757254e-16 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 9.0 9.0 9.0
    1.38791757254e-16 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 9.0 9.0 9.0 9.0
    1.38791757254e-16 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 9.0 9.0 9.0 9.0 9.0
    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 25.0
    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 25.0 25.0
    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 25.0 25.0 25.0
    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 25.0 25.0 25.0 25.0
    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 25.0 25.0 25.0 25.0 25.0</matrix></covarianceMatrix>''')
        
        if False:
            a.matrix.plot()
            a.plot( xlog=True, ylog=True)
            g.matrix.plot()
            g.plot( xlog=True, ylog=True)
 
    def test2(self):
        '''a covariance on a coarse group whose group boundaries don't quite align with the COMMARA-2.0 group boundaries'''
        a = covariances.covarianceMatrix( 
            axes = [ 
                covariances.covarianceAxis( index=0, label="row_energy_bounds", interpolation="lin,flat", unit='MeV', 
                                           data=[ 1.0e-5, 0.100, 1.0, 20.0 ] ),
                covariances.covarianceAxis( index=1, label="column_energy_bounds", mirrorOtherAxis=True ),
                covariances.covarianceAxis( index=2, label="matrix_elements", unit="b**2" ) ],
            matrix = matrix.matrix( [ [ 4.0, 1.0, 0.0 ], [ 1.0, 9.0, 0.0 ], [ 0.0, 0.0, 25.0 ] ], form=matrix.symmetricFormToken ) )
    
        self.assertEqual( map( str, a.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), [] )
        self.assertEqual( '\n'.join( a.toXMLList() ), '''<covarianceMatrix type="absolute">
  <axes>
    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-5 0.1 1 20</axis>
    <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>
    <axis index="2" label="matrix_elements" unit="b**2"/></axes>
  <matrix rows="3" columns="3" form="symmetric">
    4.0
    1.0 9.0
    0.0 0.0 25.0</matrix></covarianceMatrix>''')
            
        g = a.group( groupBoundaries = ( self.__groupBoundaries, self.__groupBoundaries ), groupUnit = ( self.__groupUnit, self.__groupUnit ) )
        g.convertAxesToUnits( ( 'MeV', 'MeV', 'b**2' ) )
        self.assertTrue( g.axes[0].unit, 'MeV' )
        self.assertTrue( g.axes[1].unit, 'MeV' )
        self.assertTrue( g.axes[2].unit, 'b**2' )
        self.assertEqual( map(str, g.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), ['13 negative eigenvalues! Worst case = -3.753334e-14', 'Ratio of smallest/largest eigenvalue (0.000000e+00) is too small'] )
        self.assertEqual( '\n'.join( g.toXMLList() ), '''<covarianceMatrix type="absolute">\n  <axes>\n    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="34"> 1e-11 1e-7 5.4e-7 4e-6 8.3153e-6 1.371e-5 2.2603e-5 0.000040169 0.000067904 9.1661e-5 1.4863e-4 3.0433e-4 4.54e-4 0.00074852 1.2341e-3 2.0347e-3 3.3546e-3 5.5308e-3 0.0091188 0.015034 0.024788 0.040868 0.06738 0.11109 0.18316 0.30197 0.49787 0.82085 1.3534 2.2313 3.6788 6.0653 10 19.64</axis>\n    <axis index="1" label="column_energy_bounds" unit="eV" mirror_row_energy_bounds="true" length="34"> 1e-5 0.1 0.54 4 8.3153 13.71 22.603 40.169 67.904 91.661 148.63 304.33 454 748.52 1234.1 2034.7 3354.6 5530.8 9118.8 15034 24788 40868 67380 111090 183160 301970 497870 820850 1353400 2231300 3678800 6065300 1e7 1.964e7</axis>\n    <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n  <matrix rows="33" columns="33" form="symmetric">\n    0.0\n    0.0 0.0\n    0.0 0.0 0.0\n    0.0 0.0 0.0 0.0\n    0.0 0.0 0.0 0.0 1.89179125484\n    0.0 0.0 0.0 0.0 2.75084805457 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.75084805457 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0 4.0\n    0.0 0.0 0.0 0.0 2.22739395496 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.23884694578 3.18579319061\n    0.0 0.0 0.0 0.0 0.687712013643 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 3.02974147792 9.0\n    0.0 0.0 0.0 0.0 0.687712013643 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 3.02974147792 9.0 9.0\n    0.0 0.0 0.0 0.0 0.687712013643 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 3.02974147792 9.0 9.0 9.0\n    0.0 0.0 0.0 0.0 0.687712013643 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 3.02974147792 9.0 9.0 9.0 9.0\n    0.0 0.0 0.0 0.0 0.231346553834 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 0.336400337996 1.01920605721 3.02760304197 3.02760304197 3.02760304197 3.02760304197 12.0275994719\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 25.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 25.0 25.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 25.0 25.0 25.0 25.0 25.0</matrix></covarianceMatrix>''')
        
        if False:
            a.matrix.plot()
            a.plot( xlog=True, ylog=True)
            g.matrix.plot()
            g.plot( xlog=True, ylog=True)

    def test3(self):
        '''a covariance on a fine group whose group boundaries don't align with the COMMARA-2.0 group boundaries at all'''
        a = covariances.covarianceMatrix( 
            axes = [ 
                covariances.covarianceAxis( index=0, label="row_energy_bounds", interpolation="lin,flat", unit='MeV', 
                                           data=[ 1.0e-5, 0.100, 1.0, 20.0 ] ),
                covariances.covarianceAxis( index=1, label="column_energy_bounds", mirrorOtherAxis=True ),
                covariances.covarianceAxis( index=2, label="matrix_elements", unit="b**2" ) ],
            matrix = matrix.matrix( [ [ 4.0, 1.0, 0.0 ], [ 1.0, 9.0, 0.0 ], [ 0.0, 0.0, 25.0 ] ], form=matrix.symmetricFormToken ) )
        
        import numpy
        fineBoundaries = numpy.linspace( 1e-11, 20.0, num=100 ).tolist()
    
        self.assertEqual( map( str, a.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), [] )
        self.assertEqual( '\n'.join( a.toXMLList() ), '''<covarianceMatrix type="absolute">
  <axes>
    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-5 0.1 1 20</axis>
    <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>
    <axis index="2" label="matrix_elements" unit="b**2"/></axes>
  <matrix rows="3" columns="3" form="symmetric">
    4.0
    1.0 9.0
    0.0 0.0 25.0</matrix></covarianceMatrix>''')
            
        g = a.group( groupBoundaries = ( fineBoundaries, fineBoundaries ), groupUnit = ( 'MeV', 'MeV' ) )
        g.convertAxesToUnits( ( 'keV', 'keV', 'b**2' ) )
        self.assertTrue( g.axes[0].unit, 'MeV' )
        self.assertTrue( g.axes[1].unit, 'MeV' )
        self.assertTrue( g.axes[2].unit, 'b**2' )
        self.assertEqual( map(str, g.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), ['48 negative eigenvalues! Worst case = -1.566892e-12', 'Ratio of smallest/largest eigenvalue (4.087677e-33) is too small'] )
        self.assertEqual( '\n'.join( g.toXMLList() ), '''<covarianceMatrix type="absolute">\n  <axes>\n    <axis index="0" label="row_energy_bounds" unit="keV" interpolation="lin,flat" length="100"> 1e-8 202.020202030101 404.040404050202 606.060606070303 808.080808090404 1010.10101011051 1212.12121213061 1414.14141415071 1616.16161617081 1818.18181819091 2020.20202021101 2222.22222223111 2424.24242425121 2626.26262627131 2828.28282829141 3030.30303031152 3232.32323233162 3434.34343435172 3636.36363637182 3838.38383839192 4040.40404041202 4242.42424243212 4444.44444445222 4646.46464647232 4848.48484849243 5050.50505051253 5252.52525253263 5454.54545455273 5656.56565657283 5858.58585859293 6060.60606061303 6262.62626263313 6464.64646465323 6666.66666667333 6868.68686869343 7070.70707071354 7272.72727273364 7474.74747475374 7676.76767677384 7878.78787879394 8080.80808081404 8282.82828283414 8484.84848485424 8686.86868687434 8888.88888889444 9090.90909091455 9292.92929293465 9494.94949495475 9696.96969697485 9898.98989899495 10101.0101010151 10303.0303030351 10505.0505050553 10707.0707070754 10909.0909090955 11111.1111111156 11313.1313131357 11515.1515151558 11717.1717171759 11919.191919196 12121.2121212161 12323.2323232362 12525.2525252563 12727.2727272764 12929.2929292965 13131.3131313166 13333.3333333367 13535.3535353568 13737.3737373769 13939.393939397 14141.4141414171 14343.4343434372 14545.4545454573 14747.4747474774 14949.4949494975 15151.5151515176 15353.5353535377 15555.5555555578 15757.5757575779 15959.595959598 16161.6161616181 16363.6363636382 16565.6565656583 16767.6767676784 16969.6969696985 17171.7171717186 17373.7373737387 17575.7575757588 17777.7777777789 17979.797979799 18181.8181818191 18383.8383838392 18585.8585858593 18787.8787878794 18989.8989898995 19191.9191919196 19393.9393939397 19595.9595959598 19797.9797979799 2e4</axis>\n    <axis index="1" label="column_energy_bounds" unit="MeV" mirror_row_energy_bounds="true" length="100"> 1e-11 0.202020202030101 0.404040404050202 0.606060606070303 0.808080808090404 1.01010101011051 1.21212121213061 1.41414141415071 1.61616161617081 1.81818181819091 2.02020202021101 2.22222222223111 2.42424242425121 2.62626262627131 2.82828282829141 3.03030303031152 3.23232323233162 3.43434343435172 3.63636363637182 3.83838383839192 4.04040404041202 4.24242424243212 4.44444444445222 4.64646464647232 4.84848484849242 5.05050505051253 5.25252525253263 5.45454545455273 5.65656565657283 5.85858585859293 6.06060606061303 6.26262626263313 6.46464646465323 6.66666666667333 6.86868686869343 7.07070707071354 7.27272727273364 7.47474747475374 7.67676767677384 7.87878787879394 8.08080808081404 8.28282828283414 8.48484848485424 8.68686868687434 8.88888888889444 9.09090909091455 9.29292929293465 9.49494949495475 9.69696969697485 9.89898989899495 10.101010101015 10.3030303030352 10.5050505050553 10.7070707070754 10.9090909090955 11.1111111111156 11.3131313131357 11.5151515151558 11.7171717171759 11.919191919196 12.1212121212161 12.3232323232362 12.5252525252563 12.7272727272764 12.9292929292965 13.1313131313166 13.3333333333367 13.5353535353568 13.7373737373769 13.939393939397 14.1414141414171 14.3434343434372 14.5454545454573 14.7474747474774 14.9494949494975 15.1515151515176 15.3535353535377 15.5555555555578 15.7575757575779 15.959595959598 16.1616161616181 16.3636363636382 16.5656565656583 16.7676767676784 16.9696969696985 17.1717171717186 17.3737373737387 17.5757575757588 17.7777777777789 17.979797979799 18.1818181818191 18.3838383838392 18.5858585858593 18.7878787878794 18.9898989898995 19.1919191919196 19.3939393939397 19.5959595959598 19.7979797979799 20</axis>\n    <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n  <matrix rows="99" columns="99" form="symmetric">\n    3.7750289953\n    5.03995050044 9.0\n    5.03995050044 9.0 9.0\n    5.03995050044 9.0 9.0 9.0\n    4.78795297518 8.54999999958 8.54999999958 8.54999999958 8.18499999931\n    0.0 0.0 0.0 0.0 1.25000000118 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0\n    0.0 0.0 0.0 0.0 1.25000000118 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0 25.0</matrix></covarianceMatrix>''')
        
        if False:
            a.matrix.plot()
            a.plot( xlog=True, ylog=True)
            g.matrix.plot()
            g.plot( xlog=True, ylog=True)


    def test4(self):
        '''test toCovarianceMatrix() on a mixedForm'''
        a = covariances.covarianceMatrix( 
            axes = [ 
                covariances.covarianceAxis( index=0, label="row_energy_bounds", interpolation="lin,flat", unit='MeV', 
                    data=[ 1.0000E-07, 1.1109E-01, 1.3534E+00, 1.9640E+01 ] ),
                covariances.covarianceAxis( index=1, label="column_energy_bounds", mirrorOtherAxis=True ),
                covariances.covarianceAxis( index=2, label="matrix_elements", unit="b**2" ) ],
            matrix = matrix.matrix( [ [ 4.0, 1.0, 0.0 ], [ 1.0, 9.0, 0.0 ], [ 0.0, 0.0, 25.0 ] ], form=matrix.symmetricFormToken ) )
        b = covariances.covarianceMatrix( 
            axes = [ 
                covariances.covarianceAxis( index=0, label="row_energy_bounds", interpolation="lin,flat", unit='MeV', 
                                           data=[ 1.0e-5, 0.100, 1.0, 20.0 ] ),
                covariances.covarianceAxis( index=1, label="column_energy_bounds", mirrorOtherAxis=True ),
                covariances.covarianceAxis( index=2, label="matrix_elements", unit="b**2" ) ],
            matrix = matrix.matrix( [ [ 4.0, 1.0, 0.0 ], [ 1.0, 9.0, 0.0 ], [ 0.0, 0.0, 25.0 ] ], form=matrix.symmetricFormToken ) )
        c = covariances.covarianceMatrix( 
            axes = [ 
                covariances.covarianceAxis( index=0, label="row_energy_bounds", interpolation="lin,flat", unit='MeV', 
                    data=[ 1.0000E-07, 6.7380E-02,1.1109E-01 , 1.3534E+00 ] ),
                covariances.covarianceAxis( index=1, label="column_energy_bounds", mirrorOtherAxis=True ),
                covariances.covarianceAxis( index=2, label="matrix_elements", unit="b**2" ) ],
            matrix = matrix.matrix( [ [ 4.0, 1.0, 0.0 ], [ 1.0, 9.0, 0.0 ], [ 0.0, 0.0, 25.0 ] ], form=matrix.symmetricFormToken ), index=2 )
 
        abc = covariances.mixedForm( [ a, b, c ] )
        self.assertEqual( map(str,abc.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), [] )
        self.assertEqual( '\n'.join( abc.toXMLList() ), '<mixed>\n  <covarianceMatrix type="absolute">\n    <axes>\n      <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-7 0.11109 1.3534 19.64</axis>\n      <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>\n      <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n    <matrix rows="3" columns="3" form="symmetric">\n      4.0\n      1.0 9.0\n      0.0 0.0 25.0</matrix></covarianceMatrix>\n  <covarianceMatrix type="absolute">\n    <axes>\n      <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-5 0.1 1 20</axis>\n      <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>\n      <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n    <matrix rows="3" columns="3" form="symmetric">\n      4.0\n      1.0 9.0\n      0.0 0.0 25.0</matrix></covarianceMatrix>\n  <covarianceMatrix index="2" type="absolute">\n    <axes>\n      <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="4"> 1e-7 0.06738 0.11109 1.3534</axis>\n      <axis index="1" label="column_energy_bounds" unit="None" mirror_row_energy_bounds="true"/>\n      <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n    <matrix rows="3" columns="3" form="symmetric">\n      4.0\n      1.0 9.0\n      0.0 0.0 25.0</matrix></covarianceMatrix></mixed>' )

        abc_c = abc.toCovarianceMatrix()
        self.assertEqual( map(str,abc_c.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), ['1 negative eigenvalues! Worst case = -2.957637e-15'] )
        self.assertEqual( '\n'.join( abc_c.toXMLList() ), '<covarianceMatrix type="absolute">\n  <axes>\n    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="9"> 1e-7 1e-5 0.06738 0.1 0.11109 1 1.3534 19.64 20</axis>\n    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="9"> 1e-7 1e-5 0.06738 0.1 0.11109 1 1.3534 19.64 20</axis>\n    <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n  <matrix rows="8" columns="8" form="symmetric">\n    8.0\n    8.0 12.0\n    5.0 9.0 17.0\n    5.0 6.0 14.0 22.0\n    1.0 2.0 2.0 10.0 43.0\n    1.0 1.0 1.0 1.0 34.0 59.0\n    0.0 0.0 0.0 0.0 0.0 25.0 50.0\n    0.0 0.0 0.0 0.0 0.0 25.0 25.0 25.0</matrix></covarianceMatrix>' )
    
        g = abc_c.group( groupBoundaries = ( self.__groupBoundaries, self.__groupBoundaries ), groupUnit = ( self.__groupUnit, self.__groupUnit ) )
        g.convertAxesToUnits( ( 'MeV', 'MeV', 'b**2' ) )
        self.assertTrue( g.axes[0].unit, 'MeV' )
        self.assertTrue( g.axes[1].unit, 'MeV' )
        self.assertTrue( g.axes[2].unit, 'b**2' )
        self.assertEqual( map(str, g.check( { 'checkUncLimits':False, 'negativeEigenTolerance':0.0001, 'eigenvalueRatioTolerance':0.0001 })), ['15 negative eigenvalues! Worst case = -1.393698e-13', 'Ratio of smallest/largest eigenvalue (3.105383e-47) is too small'] )     
        self.assertEqual( '\n'.join( g.toXMLList() ), '<covarianceMatrix type="absolute">\n  <axes>\n    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="34"> 1e-11 1e-7 5.4e-7 4e-6 8.3153e-6 1.371e-5 2.2603e-5 0.000040169 0.000067904 9.1661e-5 1.4863e-4 3.0433e-4 4.54e-4 0.00074852 1.2341e-3 2.0347e-3 3.3546e-3 5.5308e-3 0.0091188 0.015034 0.024788 0.040868 0.06738 0.11109 0.18316 0.30197 0.49787 0.82085 1.3534 2.2313 3.6788 6.0653 10 19.64</axis>\n    <axis index="0" label="row_energy_bounds" unit="MeV" interpolation="lin,flat" length="34"> 1e-11 1e-7 5.4e-7 4e-6 8.3153e-6 1.371e-5 2.2603e-5 0.000040169 0.000067904 9.1661e-5 1.4863e-4 3.0433e-4 4.54e-4 0.00074852 1.2341e-3 2.0347e-3 3.3546e-3 5.5308e-3 0.0091188 0.015034 0.024788 0.040868 0.06738 0.11109 0.18316 0.30197 0.49787 0.82085 1.3534 2.2313 3.6788 6.0653 10 19.64</axis>\n    <axis index="2" label="matrix_elements" unit="b**2"/></axes>\n  <matrix rows="33" columns="33" form="symmetric">\n    1.54105215053e-31\n    1.11033405803e-15 8.0\n    1.11033405803e-15 8.0 8.0\n    1.11033405803e-15 8.0 8.0 8.0\n    1.11033405803e-15 8.0 8.0 8.0 9.89179125484\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    1.11033405803e-15 8.0 8.0 8.0 10.7508480546 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0 12.0\n    6.93958786269e-16 5.0 5.0 5.0 7.22739395496 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 8.23884694578 16.1857931906\n    1.38791757254e-16 1.0 1.0 1.0 1.68771201364 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 4.02974147792 43.0\n    1.38791757254e-16 1.0 1.0 1.0 1.68771201364 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 4.02974147792 43.0 43.0\n    1.38791757254e-16 1.0 1.0 1.0 1.68771201364 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 4.02974147792 43.0 43.0 43.0\n    1.38791757254e-16 1.0 1.0 1.0 1.68771201364 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0 4.02974147792 43.0 43.0 43.0 43.0\n    1.38791757254e-16 1.0 1.0 1.0 1.23134655383 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 1.336400338 2.01920605721 37.027603042 37.027603042 37.027603042 37.027603042 46.0275994719\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 50.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 50.0 50.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 50.0 50.0 50.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 50.0 50.0 50.0 50.0\n    0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 16.5899915501 50.0 50.0 50.0 50.0 50.0</matrix></covarianceMatrix>') 
        
        if False:
            abc.plot( xlog=True, ylog=True, title='abd' )
            abc.plot( xlog=False, ylog=False, title='abd' )
            g.plot(xlog=True, ylog=True, title='abd grouped' )


if __name__ == '__main__':
    unittest.main()
